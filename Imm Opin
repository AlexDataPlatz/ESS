# install/ run necessary packages
library(questionr)
library(tidyverse)
library(essurvey)
library(tidyr)
library(survey)
library(tidyselect)
library(knitr)

# register for an ESS account here: https://www.europeansocialsurvey.org/user/new
# set email address (same as used to create ESS account)
set_email("name@email")


# import data from each round (nb this can take several minutes)
rawdata_rnd1 <- import_rounds(c(1))
rawdata_rnd2 <- import_rounds(c(2))
rawdata_rnd3 <- import_rounds(c(3))
rawdata_rnd4 <- import_rounds(c(4))
rawdata_rnd5 <- import_rounds(c(5))
rawdata_rnd6 <- import_rounds(c(6))
rawdata_rnd7 <- import_rounds(c(7))
rawdata_rnd8 <- import_rounds(c(8))
rawdata_rnd9 <- import_rounds(c(9))


which(colnames(rawdata_rnd1)=="eimpcnt" )
which(colnames(rawdata_rnd7)=="region" )
which(colnames(data_wtd)=="noimbro" )

# select admin variables, weights, core politics variables for each rnd
# need to wrangle rnd 1-4 to create combined region variable
# need to rename variables to match for each year
data1 <- rawdata_rnd1 %>%
  select("name", "essround", "idno", "cntry",
         "pweight", "pspwght", "inwmm", "inwyr",
         "imsmetn", "imdfetn", "impcntr",
         "imbgeco", "imueclt", "imwbcnt",
         vars_select(names(rawdata_rnd1),
                     starts_with('region')))

# clean up/ standardise variables
data1 <- unite(data1, reg, c(15:36))
data1$reg <- gsub("_","", as.character(data1$reg))
data1$reg <- gsub("NA","", as.character(data1$reg))
data1$region <- paste(data1$cntry, data1$reg, sep = "")
data1 <- subset(data1, select = -c(reg))
data1 <- data1 %>% rename(inwmme = inwmm, 
                          inwyye = inwyr)

data2 <- rawdata_rnd2 %>%
  select("name", "essround", "idno", "cntry",
         "pweight", "pspwght", "inwmm", "inwyr",
         "imsmetn", "imdfetn", "impcntr",
         "imbgeco", "imueclt", "imwbcnt",
         vars_select(names(rawdata_rnd2),
                     starts_with('region')))

# clean up/ standardise variables
data2 <- unite(data2, reg, c(15:38))
data2$reg <- gsub("_","", as.character(data2$reg))
data2$reg <- gsub("NA","", as.character(data2$reg))
data2$region <- paste(data2$cntry, data2$reg, sep = "")
data2 <- subset(data2, select = -c(reg))
data2 <- data2 %>% rename(inwmme = inwmm, 
                          inwyye = inwyr)


data3 <- rawdata_rnd3 %>%
  select("name", "essround", "idno", "cntry",
         "pweight", "pspwght", "inwmme", "inwyye",
         "imsmetn", "imdfetn", "impcntr",
         "imbgeco", "imueclt", "imwbcnt",
         vars_select(names(rawdata_rnd3),
                     starts_with('region')))

# clean up/ standardise variables
data3 <- unite(data3, reg, c(15:35))
data3$reg <- gsub("_","", as.character(data3$reg))
data3$reg <- gsub("NA","", as.character(data3$reg))
data3$region <- paste(data3$cntry, data3$reg, sep = "")
data3 <- subset(data3, select = -c(reg))


data4 <- rawdata_rnd4 %>%
  select("name", "essround", "idno", "cntry",
         "pweight", "pspwght", "inwmme", "inwyye",
         "imsmetn", "imdfetn", "impcntr",
         "imbgeco", "imueclt", "imwbcnt",
         vars_select(names(rawdata_rnd4),
                     starts_with('region')))

# clean up/ standardise variables
data4 <- unite(data4, reg, c(15:37))
data4reg <- gsub("_","", as.character(data4$reg))
data4$reg <- gsub("NA","", as.character(data4$reg))
data4$region <- paste(data4$cntry, data4$reg, sep = "")
data4 <- subset(data4, select = -c(reg))

data5 <- rawdata_rnd5 %>%
  select("name", "essround", "idno", "cntry", "region",
         "pweight", "pspwght", "inwmme", "inwyye",
         "imsmetn", "imdfetn", "impcntr",
         "imbgeco", "imueclt", "imwbcnt")

data6 <- rawdata_rnd6 %>%
  select("name", "essround", "idno", "cntry", "region",
         "pweight", "pspwght", "inwmme", "inwyye",
         "imsmetn", "imdfetn", "impcntr",
         "imbgeco", "imueclt", "imwbcnt")

data7 <- rawdata_rnd7 %>%
  select("name", "essround", "idno", "cntry", "region",
         "pweight", "pspwght", "inwmme", "inwyye",
         "imsmetn", "imdfetn", "impcntr",
         "imbgeco", "imueclt", "imwbcnt")

data8 <- rawdata_rnd8 %>%
  select("name", "essround", "idno", "cntry", "region",
         "pweight", "pspwght", "inwmme", "inwyye",
         "imsmetn", "imdfetn", "impcntr",
         "imbgeco", "imueclt", "imwbcnt")

# convert variables to numeric
data8$imsmetn <- as.numeric(data8$imsmetn)
data8$imdfetn <- as.numeric(data8$imdfetn)
data8$impcntr <- as.numeric(data8$impcntr)
data8$imbgeco <- as.numeric(data8$imbgeco)
data8$imueclt <- as.numeric(data8$imueclt)
data8$imwbcnt <- as.numeric(data8$imwbcnt)

data9 <- rawdata_rnd9 %>%
  select("name", "essround", "idno", "cntry", "region",
         "pweight", "pspwght", "inwmme", "inwyye",
         "imsmetn", "imdfetn", "impcntr",
         "imbgeco", "imueclt", "imwbcnt")

# convert variables to numeric
data9$imsmetn <- as.numeric(data9$imsmetn)
data9$imdfetn <- as.numeric(data9$imdfetn)
data9$impcntr <- as.numeric(data9$impcntr)
data9$imbgeco <- as.numeric(data9$imbgeco)
data9$imueclt <- as.numeric(data9$imueclt)
data9$imwbcnt <- as.numeric(data9$imwbcnt)


# stack each round into one db
data <- rbind(data1, data2, data3, data4, data5,
              data6, data7, data8, data9)

# recode refusal/ don't know answers as NA
data <- recode_missings(data)

# create anweight variable (post strat weight x population weight)
data$anweight <- data$pspwght*data$pweight*10e3

# make sure continuous variables remain numeric
data$imsmetn <- as.numeric(data$imsmetn)
data$imdfetn <- as.numeric(data$imdfetn)
data$impcntr <- as.numeric(data$impcntr)
data$imbgeco <- as.numeric(data$imbgeco)
data$imueclt <- as.numeric(data$imueclt)
data$imwbcnt <- as.numeric(data$imwbcnt)

head(data)

# Remove NAs
ctryallnas <- data[c(2, 4:6, 9:14)]
ctryall <- na.omit(ctryallnas)


# Create new variables to simplify existing data
# recode same/ diff race q, creates 16 possible combinations
ctryrace <- ctryall
ctryrace$imsmetn10 <- ctryrace$imsmetn*10
ctryrace$smdf <- ctryrace$imsmetn10 + ctryrace$imdfetn

# form recoded values into 4 groups
# 1= open, 2=same race pref, 3=diff race pref, 4= restrictive
ctryrace$class <- dplyr::recode(ctryrace$smdf, 
                              "11" = 1L,
                              "12" = 1L,
                              "21" = 1L,
                              "22" = 1L,
                              "13" = 2L,
                              "14" = 2L,
                              "23" = 2L,
                              "24" = 2L,
                              "31" = 3L,
                              "32" = 3L,
                              "41" = 3L,
                              "42" = 3L,
                              "33" = 4L,
                              "34" = 4L,
                              "43" = 4L,
                              "44" = 4L)


# next, recode economic/ culture preference variables
ctryculec <- ctryall

ctryculec$cul <- ctryculec$imueclt
ctryculec$cul[ctryculec$imueclt < 5] <- 1
ctryculec$cul[ctryculec$cul > 4] <- 2

ctryculec$econ <- ctryculec$imbgeco
ctryculec$econ[ctryculec$imbgeco > 4] <- 20
ctryculec$econ[ctryculec$econ < 5] <- 10

ctryculec$culec <- ctryculec$econ + ctryculec$cul

# create 4 groups for economic and /or cultural preferences
# group 1= open, 2= econ pref, 3= culture pref, 4=restrict
ctryculec$class <- dplyr::recode(ctryculec$culec, 
                               "11" = 4L,
                               "12" = 3L,
                               "21" = 2L,
                               "22" = 1L)

# Add new variables to ctryall db
ctryall$culec <- ctryculec$class
ctryall$race <- ctryrace$class

# recode imwbcnt (immigration benefits country)
# into simple binary pos or neg variable
ctryall$benefitpn <- ctryall$imwbcnt
ctryall$benefitpn[ctryall$imwbcnt < 5] <- 2
ctryall$benefitpn[ctryall$benefitpn > 4] <- 1

head(ctryall)

# make variables camparable and compatible with each other
ctryint <- ctryall[c(5:13)]
ctryint[,10:13] <- ctryall[, c(1:4)]

ctryint$race <- dplyr::recode(ctryint$race, "1" = 33L, "2" = 23L,
                            "3" = 13L,  "4" = 3L)

ctryint$impcntr <- dplyr::recode(ctryint$impcntr,  "1" = 33L, "2" = 23L,
                               "3" = 13L,  "4" = 3L)

ctryint$culec <- dplyr::recode(ctryint$culec,  "1" = 33L, "2" = 23L,
                             "3" = 13L,  "4" = 3L)

ctryint$imwbcnt <- ctryint$imwbcnt+1
ctryint$imwbcnt <- ctryint$imwbcnt*3


# extract all 'open' immigration responses
target <- c("33", "23")

ctryopen <- ctryint %>%
  filter(race == "33" &
           impcntr %in% target &
           benefitpn == "1")

# assign 'open' class value 1
ctryopen$class <- 1

# extract all 'restrictive' respondents
target <- c("23", "3")

ctryclose <- ctryint %>%
  filter(race %in% target & 
           impcntr == "3" &
           benefitpn == "2")

# assign "restrictive/ closed" class value 3
ctryclose$class <- 3


# extract all "selective" respondents
target <- c("13", "23")

ctrysel <- ctryint %>%
  filter(race %in% target |
           impcntr == "13")

# assign "selective" class value 2
ctrysel$class <- 2


# bind open, selective and restrictive respondents into new db
ctrycl <- rbind(ctryopen, ctrysel, ctryclose)


# Calculate weighted size of classes for each round, all countries
cltemp <- wtd.table(ctrycl$class,
                    ctrycl$essround,
                    weights=ctrycl$pspwght, 
                    digits = 0)

# calculate percentages of each class
clperc <- cprop(cltemp, digits=0, 
                total=FALSE, n=FALSE, percent=TRUE)

allcl <- as.data.frame.matrix(t(clperc))

# view size of each class
allcl

# make line plot, size of 3 classes for rounds 1-9
# add years to db
years <- seq(2002,2018,2)
allcl$year <- as.numeric(years)

# rename class variables
allcl <- allcl %>% rename(open = 1, 
                          selective = 2,
                          restrictive = 3)

# convert db to long format
longall <- pivot_longer(allcl, 
                      cols=1:3, 
                      names_to = "class", 
                      values_to = "proportion")

# plot class sizes 2002-2018
ggplot(longall) +
  geom_line(aes(year, proportion, group = class, colour = class))




# Select 14 countries with data for all rounds
target <- c("BE","EE","FI","FR","DE","HU",
            "IE","NL","PL","PT","SI","ES","SE","GB")

ctrycore <- ctrycl %>%
  filter(cntry %in% target)

# Calculate weighted size of classes for each round per country
# Belgium
bel <- ctrycore %>%
  filter(cntry == "BE")

beltemp <- wtd.table(bel$class,
                    bel$essround,
                    weights=bel$pspwght, 
                    digits = 0)

belpc <- cprop(beltemp, digits=0, 
                total=FALSE, n=FALSE, percent=TRUE)

belcl <- as.data.frame.matrix(t(belpc))

belcl

# add country code
belcl$ctry <- c("BE")

# add years to db
years <- seq(2002,2018,2)
belcl$year <- as.numeric(years)

# Estonia
est <- ctrycore %>%
  filter(cntry == "EE")

esttemp <- wtd.table(est$class,
                     est$essround,
                     weights=est$pspwght, 
                     digits = 0)

estpc <- cprop(esttemp, digits=0, 
               total=FALSE, n=FALSE, percent=TRUE)

estcl <- as.data.frame.matrix(t(estpc))

estcl

# add country code
estcl$ctry <- c("EE")

# add years to db (nb 2002 is missing from EE data)
years <- seq(2004,2018,2)
estcl$year <- as.numeric(years)


# Finland
fin <- ctrycore %>%
  filter(cntry == "FI")

fintemp <- wtd.table(fin$class,
                     fin$essround,
                     weights=fin$pspwght, 
                     digits = 0)

finpc <- cprop(fintemp, digits=0, 
               total=FALSE, n=FALSE, percent=TRUE)

fincl <- as.data.frame.matrix(t(finpc))

fincl

# add country code
fincl$ctry <- c("FI")

# add years to db
years <- seq(2002,2018,2)
fincl$year <- as.numeric(years)


# France
fra <- ctrycore %>%
  filter(cntry == "FR")

fratemp <- wtd.table(fra$class,
                     fra$essround,
                     weights=fra$pspwght, 
                     digits = 0)

frapc <- cprop(fratemp, digits=0, 
               total=FALSE, n=FALSE, percent=TRUE)

fracl <- as.data.frame.matrix(t(frapc))

fracl

# add country code
fracl$ctry <- c("FR")

# add years to db
years <- seq(2002,2018,2)
fracl$year <- as.numeric(years)


# Germany
ger <- ctrycore %>%
  filter(cntry == "DE")

gertemp <- wtd.table(ger$class,
                     ger$essround,
                     weights=ger$pspwght, 
                     digits = 0)

gerpc <- cprop(gertemp, digits=0, 
               total=FALSE, n=FALSE, percent=TRUE)

gercl <- as.data.frame.matrix(t(gerpc))

gercl

# add country code
gercl$ctry <- c("DE")

# add years to db
years <- seq(2002,2018,2)
gercl$year <- as.numeric(years)

# Hungary
hun <- ctrycore %>%
  filter(cntry == "HU")

huntemp <- wtd.table(hun$class,
                     hun$essround,
                     weights=hun$pspwght, 
                     digits = 0)

hunpc <- cprop(huntemp, digits=0, 
               total=FALSE, n=FALSE, percent=TRUE)

huncl <- as.data.frame.matrix(t(hunpc))

huncl

# add country code
huncl$ctry <- c("HU")

# add years to db (nb Hungary round 9 data is incomplete/ missing)
years <- seq(2002,2016,2)
huncl$year <- as.numeric(years)

# Ireland
ire <- ctrycore %>%
  filter(cntry == "IE")

iretemp <- wtd.table(ire$class,
                     ire$essround,
                     weights=ire$pspwght, 
                     digits = 0)

irepc <- cprop(iretemp, digits=0, 
               total=FALSE, n=FALSE, percent=TRUE)

irecl <- as.data.frame.matrix(t(irepc))

irecl

# add country code
irecl$ctry <- c("IE")

# add years to db
years <- seq(2002,2018,2)
irecl$year <- as.numeric(years)

# Netherlands
neth <- ctrycore %>%
  filter(cntry == "NL")

nethtemp <- wtd.table(neth$class,
                     neth$essround,
                     weights=neth$pspwght, 
                     digits = 0)

nethpc <- cprop(nethtemp, digits=0, 
               total=FALSE, n=FALSE, percent=TRUE)

nethcl <- as.data.frame.matrix(t(nethpc))

nethcl

# add country code
nethcl$ctry <- c("NL")

# add years to db
years <- seq(2002,2018,2)
nethcl$year <- as.numeric(years)

# Poland
pol <- ctrycore %>%
  filter(cntry == "PL")

poltemp <- wtd.table(pol$class,
                     pol$essround,
                     weights=pol$pspwght, 
                     digits = 0)

polpc <- cprop(poltemp, digits=0, 
               total=FALSE, n=FALSE, percent=TRUE)

polcl <- as.data.frame.matrix(t(polpc))

polcl

# add country code
polcl$ctry <- c("PL")

# add years to db
years <- seq(2002,2018,2)
polcl$year <- as.numeric(years)

# Portugal
port <- ctrycore %>%
  filter(cntry == "PT")

porttemp <- wtd.table(port$class,
                     port$essround,
                     weights=port$pspwght, 
                     digits = 0)

portpc <- cprop(porttemp, digits=0, 
               total=FALSE, n=FALSE, percent=TRUE)

portcl <- as.data.frame.matrix(t(portpc))

portcl

# add country code
portcl$ctry <- c("PT")

# add years to db
years <- seq(2002,2018,2)
portcl$year <- as.numeric(years)


# Slovenia
slv <- ctrycore %>%
  filter(cntry == "SI")

slvtemp <- wtd.table(slv$class,
                     slv$essround,
                     weights=slv$pspwght, 
                     digits = 0)

slvpc <- cprop(slvtemp, digits=0, 
               total=FALSE, n=FALSE, percent=TRUE)

slvcl <- as.data.frame.matrix(t(slvpc))

slvcl

# add country code
slvcl$ctry <- c("SI")

# add years to db
years <- seq(2002,2018,2)
slvcl$year <- as.numeric(years)


# Spain
spa <- ctrycore %>%
  filter(cntry == "ES")

spatemp <- wtd.table(spa$class,
                     spa$essround,
                     weights=spa$pspwght, 
                     digits = 0)

spapc <- cprop(spatemp, digits=0, 
               total=FALSE, n=FALSE, percent=TRUE)

spacl <- as.data.frame.matrix(t(spapc))

spacl

# add country code
spacl$ctry <- c("ES")

# add years to db
years <- seq(2002,2018,2)
spacl$year <- as.numeric(years)

# Sweden
swe <- ctrycore %>%
  filter(cntry == "SE")

swetemp <- wtd.table(swe$class,
                     swe$essround,
                     weights=swe$pspwght, 
                     digits = 0)

swepc <- cprop(swetemp, digits=0, 
               total=FALSE, n=FALSE, percent=TRUE)

swecl <- as.data.frame.matrix(t(swepc))

swecl

# add country code
swecl$ctry <- c("SE")

# add years to db
years <- seq(2002,2018,2)
swecl$year <- as.numeric(years)

# UK
uk <- ctrycore %>%
  filter(cntry == "GB")

uktemp <- wtd.table(uk$class,
                     uk$essround,
                     weights=uk$pspwght, 
                     digits = 0)

ukpc <- cprop(uktemp, digits=0, 
               total=FALSE, n=FALSE, percent=TRUE)

ukcl <- as.data.frame.matrix(t(ukpc))

ukcl

# add country code
ukcl$ctry <- c("GB")

# add years to db
years <- seq(2002,2018,2)
ukcl$year <- as.numeric(years)


# bind country datasets together
corecl <- rbind(belcl, estcl, fincl, fracl, gercl,
                huncl, irecl, nethcl, polcl, portcl,
                slvcl, spacl, swecl, ukcl)


# rename class variables
corecl <- corecl %>% rename(open = 1, 
                          selective = 2,
                          restrictive = 3)


# plot class sizes 2002-2018
ggplot(corecl) +
  geom_line(aes(year, open, colour = ctry), show.legend = FALSE) +
  geom_hline(yintercept=50, linetype="dashed", colour = "grey60") +
  ylab("Open Class (%)") +
  xlab("") +
  facet_wrap(~ ctry)
